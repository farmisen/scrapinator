[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "scrapinator"
version = "0.1.0"
description = "Web task automation system with AI-powered website analysis"
readme = "README_ADAPTIVE.md"
requires-python = ">=3.12"
license = {text = "MIT"}
authors = [
    {name = "Scrapinator Project", email = "farmisen@cgmail.com"},
]
keywords = ["web", "automation", "scraping", "ai", "claude", "playwright", "task"]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.12",
    "Topic :: Internet :: WWW/HTTP :: Dynamic Content",
    "Topic :: Software Development :: Libraries :: Python Modules",
]

dependencies = [
    "playwright>=1.40.0",
    "requests>=2.31.0",
    "langchain>=0.3.0",
    "langchain-anthropic>=0.3.0",
    "langchain-openai>=0.2.0",
    "anthropic>=0.18.0",
    "openai>=1.0.0",
    "beautifulsoup4>=4.12.0",
    "lxml>=4.9.0",
    "Pillow>=10.0.0",
    "pydantic>=2.0.0",
    "aiofiles>=23.0.0",
    "tenacity>=8.2.0",
]

[project.optional-dependencies]
dev = [
    "ruff>=0.1.0",
    "pyright>=1.1.350",
    "pre-commit>=3.3.0",
    "pytest>=8.0.0",
    "pytest-asyncio>=0.21.0",
]

docs = [
    "sphinx>=7.0.0",
    "sphinx-rtd-theme>=1.3.0",
    "sphinx-autodoc-typehints>=1.24.0",
]

[project.scripts]
scrapinator = "src.web_task_automation:main"

[project.urls]
Homepage = "https://github.com/farmisen/scrapinator"
Documentation = "https://scrapinator.readthedocs.io"
Repository = "https://github.com/farmisen/scrapinator.git"
Issues = "https://github.com/farmisen/scrapinator/issues"

[tool.setuptools]
package-dir = {"" = "."}
packages = ["src"]

[tool.setuptools.package-data]
src = ["*.json", "*.md"]

[tool.ruff]
target-version = "py312"
line-length = 100
fix = true

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "auto"

[tool.ruff.lint]
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings
    "F",   # pyflakes
    "I",   # isort
    "C",   # flake8-comprehensions
    "B",   # flake8-bugbear
    "UP",  # pyupgrade
    "N",   # pep8-naming
    "YTT", # flake8-2020
    "ANN", # flake8-annotations
    "S",   # flake8-bandit
    "BLE", # flake8-blind-except
    "A",   # flake8-builtins
    # "COM", # flake8-commas - removed COM812 conflict
    "C4",  # flake8-comprehensions
    "DTZ", # flake8-datetimez
    "EM",  # flake8-errmsg
    "EXE", # flake8-executable
    "ISC", # flake8-implicit-str-concat
    "ICN", # flake8-import-conventions
    "LOG", # flake8-logging
    "G",   # flake8-logging-format
    "PIE", # flake8-pie
    "T20", # flake8-print
    "PT",  # flake8-pytest-style
    "Q",   # flake8-quotes
    "RET", # flake8-return
    "SIM", # flake8-simplify
    "TID", # flake8-tidy-imports
    "TC",  # flake8-type-checking
    "ARG", # flake8-unused-arguments
    "PTH", # flake8-use-pathlib
    "ERA", # eradicate
    "PGH", # pygrep-hooks
    "PL",  # Pylint
    "TRY", # tryceratops
    "RUF", # Ruff-specific rules
]
ignore = [
    "E501",   # line too long (handled by formatter)
    "B008",   # do not perform function calls in argument defaults
    "C901",   # too complex
    "ANN401", # dynamically typed expressions (Any)
    "T201",   # print found
    "PLR0913", # too many arguments
]

[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["F401"]

[tool.ruff.lint.isort]
known-third-party = ["selenium", "requests", "bs4", "langchain", "langchain_anthropic", "langchain_openai", "anthropic", "openai", "pydantic"]

[tool.ruff.lint.flake8-annotations]
allow-star-arg-any = true

[tool.ruff.lint.flake8-type-checking]
quote-annotations = true